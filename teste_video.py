# ========================================
# SCRIPT DE TESTE R√ÅPIDO DO CONTADOR
# ========================================
# Este script faz um teste b√°sico do sistema de detec√ß√£o
# sem o rastreamento completo, ideal para validar se o modelo est√° funcionando

import cv2  # OpenCV para processamento de v√≠deo
import os   # Para opera√ß√µes com arquivos e pastas
from ultralytics import YOLO  # YOLOv8 para detec√ß√£o

def testar_contador_video():
    """
    Fun√ß√£o principal de teste do contador de pessoas.
    
    Esta fun√ß√£o:
    1. Procura modelos dispon√≠veis (treinado ou pr√©-treinado)
    2. Procura v√≠deos no diret√≥rio atual
    3. Permite escolher um v√≠deo para teste
    4. Executa detec√ß√£o b√°sica sem rastreamento
    5. Mostra resultados em tempo real
    
    √â uma vers√£o simplificada para testes r√°pidos.
    """
    print("üéØ TESTE DO CONTADOR DE PESSOAS")
    print("=" * 50)
    
    # ========================================
    # ETAPA 1: VERIFICA MODELOS DISPON√çVEIS
    # ========================================
    modelo_treinado = "runs/detect/train/weights/best.pt"  # Seu modelo personalizado
    modelo_pretrained = "yolov8n.pt"  # Modelo gen√©rico pr√©-treinado
    
    # Escolhe qual modelo usar baseado na disponibilidade
    if os.path.exists(modelo_treinado):
        modelo_path = modelo_treinado
        print(f"‚úÖ Usando modelo treinado: {modelo_path}")
    elif os.path.exists(modelo_pretrained):
        modelo_path = modelo_pretrained
        print(f"‚ö†Ô∏è Usando modelo pr√©-treinado: {modelo_path}")
    else:
        print("‚ùå Nenhum modelo encontrado!")
        return
    
    # ========================================
    # ETAPA 2: PROCURA V√çDEOS NO DIRET√ìRIO
    # ========================================
    print("\nüìÅ Procurando v√≠deos no diret√≥rio...")
    
    # Lista de extens√µes de v√≠deo suportadas
    extensoes_video = ['.mp4', '.avi', '.mov', '.mkv', '.wmv', '.flv']
    videos_encontrados = []
    
    # Varre todos os arquivos do diret√≥rio atual
    for arquivo in os.listdir('.'):
        # Verifica se o arquivo tem extens√£o de v√≠deo
        if any(arquivo.lower().endswith(ext) for ext in extensoes_video):
            videos_encontrados.append(arquivo)
    
    # ========================================
    # ETAPA 3: INTERFACE DE ESCOLHA DE V√çDEO
    # ========================================
    if videos_encontrados:
        print("üé¨ V√≠deos encontrados:")
        # Lista os v√≠deos numerados
        for i, video in enumerate(videos_encontrados, 1):
            print(f"  {i}. {video}")
        
        # Permite escolher por n√∫mero ou digitar caminho completo
        escolha = input(f"\nEscolha um v√≠deo (1-{len(videos_encontrados)}) ou digite o caminho completo: ").strip()
        
        try:
            # Se digitou um n√∫mero v√°lido, usa o v√≠deo correspondente
            if escolha.isdigit() and 1 <= int(escolha) <= len(videos_encontrados):
                video_path = videos_encontrados[int(escolha) - 1]
            else:
                # Sen√£o, assume que digitou um caminho completo
                video_path = escolha
        except:
            video_path = escolha
    else:
        # Se n√£o encontrou v√≠deos, pede para digitar o caminho
        video_path = input("üìÇ Digite o caminho completo do v√≠deo: ").strip()
    
    # Remove aspas do caminho (caso o usu√°rio tenha copiado com aspas)
    video_path = video_path.strip('"\'')
    
    # Verifica se o arquivo existe
    if not os.path.exists(video_path):
        print(f"‚ùå V√≠deo n√£o encontrado: {video_path}")
        return
    
    print(f"üé¨ Testando com: {video_path}")
    
    # ========================================
    # ETAPA 4: CARREGA O MODELO YOLO
    # ========================================
    try:
        model = YOLO(modelo_path)
        print("‚úÖ Modelo carregado com sucesso!")
    except Exception as e:
        print(f"‚ùå Erro ao carregar modelo: {e}")
        return
    
    # ========================================
    # ETAPA 5: ABRE E ANALISA O V√çDEO
    # ========================================
    cap = cv2.VideoCapture(video_path)
    
    if not cap.isOpened():
        print("‚ùå Erro ao abrir o v√≠deo!")
        return
    
    # Obt√©m informa√ß√µes do v√≠deo
    fps = int(cap.get(cv2.CAP_PROP_FPS))              # Frames por segundo
    width = int(cap.get(cv2.CAP_PROP_FRAME_WIDTH))    # Largura em pixels
    height = int(cap.get(cv2.CAP_PROP_FRAME_HEIGHT))  # Altura em pixels
    total_frames = int(cap.get(cv2.CAP_PROP_FRAME_COUNT))  # Total de frames
    
    print(f"üìä Info do v√≠deo: {width}x{height}, {fps} FPS, {total_frames} frames")
    print("\n‚ñ∂Ô∏è Iniciando teste... Pressione 'q' para sair")
    
    # ========================================
    # ETAPA 6: LOOP PRINCIPAL DE PROCESSAMENTO
    # ========================================
    pessoas_detectadas = 0  # Contador atual de pessoas no frame
    frame_count = 0         # Contador de frames processados
    
    while True:
        # L√™ o pr√≥ximo frame do v√≠deo
        ret, frame = cap.read()
        if not ret:  # Se n√£o conseguiu ler (fim do v√≠deo)
            print("üìπ Fim do v√≠deo!")
            break
        
        frame_count += 1
        
        # OTIMIZA√á√ÉO: Processa apenas a cada 3 frames para melhor performance
        if frame_count % 3 == 0:
            try:
                # Executa detec√ß√£o YOLO no frame atual
                results = model(frame, verbose=False)  # verbose=False evita prints
                
                pessoas_no_frame = 0  # Contador de pessoas neste frame
                
                # Verifica se encontrou alguma detec√ß√£o
                if results[0].boxes is not None:
                    # Processa cada detec√ß√£o encontrada
                    for box in results[0].boxes:
                        conf = box.conf[0].float()  # N√≠vel de confian√ßa da detec√ß√£o
                        
                        # S√≥ conta se a confian√ßa for alta (maior que 30%)
                        if conf > 0.3:
                            pessoas_no_frame += 1
                            
                            # DESENHA CAIXA DELIMITADORA ao redor da pessoa
                            x1, y1, x2, y2 = box.xyxy[0].int().tolist()  # Coordenadas da caixa
                            
                            # Desenha ret√¢ngulo verde
                            cv2.rectangle(frame, (x1, y1), (x2, y2), (0, 255, 0), 2)
                            
                            # Adiciona texto com n√≠vel de confian√ßa
                            cv2.putText(frame, f'Pessoa ({conf:.2f})', 
                                       (x1, y1-10),  # Posi√ß√£o do texto
                                       cv2.FONT_HERSHEY_SIMPLEX, 0.5, (0, 255, 0), 2)
                
                # Atualiza contador global
                pessoas_detectadas = pessoas_no_frame
                
            except Exception as e:
                print(f"‚ö†Ô∏è Erro no frame {frame_count}: {e}")
                continue
        
        # ========================================
        # ETAPA 7: ADICIONA INFORMA√á√ïES NA TELA (PAINEL MAIOR)
        # ========================================
        
        # PAINEL DE INFORMA√á√ïES (fundo escuro) - AUMENTADO
        cv2.rectangle(frame, (10, 10), (450, 130), (0, 0, 0), -1)  # Era 350x100, agora 450x130
        cv2.rectangle(frame, (10, 10), (450, 130), (255, 255, 255), 3)  # Contorno mais grosso
        
        # TEXTOS INFORMATIVOS (MAIORES)
        # Contador principal
        cv2.putText(frame, f"PESSOAS DETECTADAS: {pessoas_detectadas}", 
                   (25, 45), cv2.FONT_HERSHEY_SIMPLEX, 0.8, (0, 255, 0), 3)  # Era 0.6, agora 0.8
        
        # Progresso do v√≠deo
        cv2.putText(frame, f"Frame: {frame_count}/{total_frames}", 
                   (25, 75), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)  # Era 0.5, agora 0.6
        
        # Instru√ß√µes
        cv2.putText(frame, "Pressione 'q' para sair", 
                   (25, 100), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (255, 255, 255), 2)  # Era 0.5, agora 0.6
        
        # Modelo sendo usado
        cv2.putText(frame, f"Modelo: {os.path.basename(modelo_path)}", 
                   (25, 125), cv2.FONT_HERSHEY_SIMPLEX, 0.5, (200, 200, 200), 1)
        
        # ========================================
        # ETAPA 8: REDIMENSIONA E MOSTRA O FRAME (JANELA MAIOR)
        # ========================================
        
        # Se o v√≠deo for muito pequeno, aumenta
        if width < 800:
            scale = 800 / width
            new_width = int(width * scale)
            new_height = int(height * scale)
            frame = cv2.resize(frame, (new_width, new_height))
        # Se o v√≠deo for muito grande, redimensiona para caber na tela
        elif width > 1400:  # Era 1200, agora 1400
            scale = 1400 / width  # Calcula fator de escala
            new_width = int(width * scale)
            new_height = int(height * scale)
            frame = cv2.resize(frame, (new_width, new_height))
        
        # Mostra o frame processado com JANELA MAIOR
        cv2.namedWindow('TESTE - Contador de Pessoas', cv2.WINDOW_NORMAL)
        cv2.resizeWindow('TESTE - Contador de Pessoas', 1100, 750)  # Janela inicial maior
        cv2.imshow('TESTE - Contador de Pessoas', frame)
        
        # Verifica se usu√°rio pressionou 'q' para sair
        if cv2.waitKey(1) & 0xFF == ord('q'):
            break
    
    # ========================================
    # ETAPA 9: FINALIZA√á√ÉO E LIMPEZA
    # ========================================
    cap.release()         # Libera o arquivo de v√≠deo
    cv2.destroyAllWindows()  # Fecha janelas do OpenCV
    
    # Mostra resultado final
    print("\n" + "="*50)
    print("‚úÖ TESTE CONCLU√çDO!")
    print(f"üìä √öltimo frame: {pessoas_detectadas} pessoas detectadas")
    print("="*50)

# ========================================
# EXECU√á√ÉO DO SCRIPT
# ========================================
if __name__ == "__main__":
    """
    Ponto de entrada do programa de teste.
    Executa a fun√ß√£o principal quando o script √© rodado diretamente.
    """
    testar_contador_video()
